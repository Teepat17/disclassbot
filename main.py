import discord
from discord.ext import commands, tasks
import logging
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta, time as dtime
import asyncio
import discord.utils
from discord.ui import View, Button
import pytz

load_dotenv()
token = os.getenv('DISCORD_TOKEN')

handlers = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
intent = discord.Intents.default()
intent.message_content = True
intent.members = True

bot = commands.Bot(command_prefix='/', intents=intent)

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
TIMETABLE = {
    "monday": [
        {"room": "3210", "subject_code": "Eng for sci"},
        {"room": "3309", "subject_code": "Thai"},
        {"room": "7504", "subject_code": "math"},
        {"room": "7504", "subject_code": "add math"},
        {"room": "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "subject_code": "lunch"},
        {"room": "2409", "subject_code": "physics"},
        {"room": "7301", "subject_code": "‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß"},
        {"room": "----", "subject_code": "‡∏ä‡∏∏‡∏°‡∏ô‡∏∏‡∏°"},
        {"room": "7601", "subject_code": "stat math"},
        {"room": "7601", "subject_code": "stat math"},
    ],
    "tuesday": [
        {"room": "COM 4", "subject_code": "Sketchup"},
        {"room": "COM 4", "subject_code": "Sketchup"},
        {"room": "2102", "subject_code": "physics"},
        {"room": "7504", "subject_code": "math"},
        {"room": "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "subject_code": "lunch"},
        {"room": "2302", "subject_code": "BIO"},
        {"room": "2302", "subject_code": "BIO"},
        {"room": "3509", "subject_code": "GEO"},
        {"room": "2401", "subject_code": "research"},
        {"room": "2401", "subject_code": "research"},
    ],
    "wednesday": [
        {"room": "2102", "subject_code": "Chem"},
        {"room": "2102", "subject_code": "Chem"},
        {"room": "3509", "subject_code": "History"},
        {"room": "3209", "subject_code": "ENG"},
        {"room": "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "subject_code": "lunch"},
        {"room": "3508", "subject_code": "GEO"},
        {"room": "4304", "subject_code": "Art"},
        {"room": "7502", "subject_code": "add math"},
        {"room": "----", "subject_code": "3rd lang"},
        {"room": "----", "subject_code": "3rd lang"},
    ],
    "thursday": [
        {"room": "COM 2", "subject_code": "com prog"},
        {"room": "COM 2", "subject_code": "com prog"},
        {"room": "3209", "subject_code": "ENG"},
        {"room": "3209", "subject_code": "ENG Native"},
        {"room": "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "subject_code": "lunch"},
        {"room": "7502", "subject_code": "‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤"},
        {"room": "2", "subject_code": "physics"},
        {"room": "3509", "subject_code": "physics"},
        {"room": "2401", "subject_code": "writing"},
        {"room": "2401", "subject_code": "writing"},
    ],
    "friday": [
        {"room": "2102", "subject_code": "com prog"},
        {"room": "2102", "subject_code": "com prog"},
        {"room": "7504", "subject_code": "ENG"},
        {"room": "7504", "subject_code": "ENG Native"},
        {"room": "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "subject_code": "lunch"},
        {"room": "HR(depend)", "subject_code": "‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤"},
        {"room": "HR(depend)", "subject_code": "physics"},
        {"room": "3309", "subject_code": "physics"},
    ]
}

CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
ROLE_CHANNEL_ID = int(os.getenv('ROLE_CHANNEL_ID'))  # ‡πÉ‡∏™‡πà channel id ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏¢‡∏®

@bot.command()
async def test_channel(ctx):
    channel = bot.get_channel(CHANNEL_ID)
    await ctx.send(f"channel = {channel}")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≤‡∏ö
CLASS_DURATION = 50  # ‡∏ô‡∏≤‡∏ó‡∏µ

@bot.command(name="event40mins")
async def event_40mins(ctx):
    global CLASS_DURATION
    CLASS_DURATION = 40
    await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 40 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

@bot.command(name="event50mins")
async def event_50mins(ctx):
    global CLASS_DURATION
    CLASS_DURATION = 50
    await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 50 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

def get_next_class_time():
    now = datetime.now()
    start_time = dtime(8, 10)
    for i in range(len(TIMETABLE.get(now.strftime("%A").lower(), []))):
        class_time = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * i)).time()
        if now.time() < class_time:
            return i, class_time
    return None, None

@bot.event
async def on_ready():
    print(f'hihihi Im {bot.user.name}')
    if not notify_class.is_running():
        notify_class.start()

@tasks.loop(minutes=1)
async def notify_class():
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    weekday = now.strftime("%A").lower()
    if weekday not in TIMETABLE:
        return

    timetable_today = TIMETABLE[weekday]
    start_time = dtime(8, 10)
    channel = discord.utils.get(bot.get_all_channels(), id=CHANNEL_ID)
    guild = channel.guild if channel else None
    role = discord.utils.get(guild.roles, name="MSEPtub7") if guild else None
    role_mention = role.mention if role else "@MSEPtub7"

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö‡∏Ñ‡∏≤‡∏ö
    for i in range(len(timetable_today)):
        class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * (i + 1))).time()
        if now.time().hour == class_end.hour and now.time().minute == class_end.minute:
            class_info = timetable_today[i]
            await channel.send(
                f"{role_mention}\n"
                f"‚è∞ ‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {i+1} ‡πÅ‡∏•‡πâ‡∏ß!\n"
                f"‡∏´‡πâ‡∏≠‡∏á: {class_info['room']}  "
                f"‡∏ß‡∏¥‡∏ä‡∏≤: {class_info['subject_code']}\n"
            )
            break

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    last_class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * len(timetable_today))).time()
    if now.time().hour == last_class_end.hour and now.time().minute == last_class_end.minute:
        await channel.send("‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û üöå")

@bot.command(name="class")
async def class_now(ctx, arg=None):
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    if arg != "now":
        await ctx.send("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/class now` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≤‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
        return

    weekday = now.strftime("%A").lower()
    if weekday not in TIMETABLE:
        await ctx.send("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        return

    start_time = dtime(8, 10)
    timetable_today = TIMETABLE[weekday]
    found = False
    for i in range(len(timetable_today)):
        class_start = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * i)).time()
        class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * (i + 1))).time()
        if class_start <= now.time() < class_end:
            class_info = timetable_today[i]
            await ctx.send(
                f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {i+1}\n"
                f"‡∏ß‡∏¥‡∏ä‡∏≤: {class_info['subject_code']}\n"
                f"‡∏´‡πâ‡∏≠‡∏á: {class_info['room']}"
            )
            found = True
            break
    if not found:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        first_class_start = (datetime.combine(now.date(), start_time)).time()
        last_class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * len(timetable_today))).time()
        if now.time() < first_class_start:
            await ctx.send("‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        elif now.time() >= last_class_end:
            await ctx.send("‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û üöå")
        else:
            await ctx.send("‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")

@bot.event
async def on_member_join(member):
    guild = member.guild
    role_name = "MSEPtub7"
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ role ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    role = discord.utils.get(guild.roles, name=role_name)
    if role is None:
        role = await guild.create_role(name=role_name)
    await member.add_roles(role)
    try:
        await member.send(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® {role_name} ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception:
        pass  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏¥‡∏î DM

@bot.command(name="‡∏£‡∏±‡∏ö‡∏¢‡∏®")
async def give_role_button(ctx):
    if ctx.channel.id != ROLE_CHANNEL_ID:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    class RoleButtonView(View):
        @discord.ui.button(label="‡∏£‡∏±‡∏ö‡∏¢‡∏® MSEPtub7", style=discord.ButtonStyle.primary, custom_id="get_mseptub7")
        async def button_callback(self, interaction: discord.Interaction, button: Button):
            role_name = "MSEPtub7"
            guild = interaction.guild
            role = discord.utils.get(guild.roles, name=role_name)
            if role is None:
                role = await guild.create_role(name=role_name)
            await interaction.user.add_roles(role)
            await interaction.response.send_message(f"‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® {role.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏® MSEPtub7", view=RoleButtonView())

bot.run(token, log_handler=handlers, log_level=logging.DEBUG)